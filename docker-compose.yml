services:
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - '${AUTH_PORT}:8001'
    env_file:
      - .env
    volumes:
      - ./auth-service:/usr/src/app
      - /usr/src/app/node_modules
    command: yarn start:dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - chat_network
    restart: unless-stopped

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - '${USER_PORT}:8002'
    env_file:
      - .env
    volumes:
      - ./user-service:/usr/src/app       
      - /usr/src/app/node_modules     
    command: yarn start:dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - chat_network
    restart: unless-stopped

  websocket-gateway-service:
    build:
      context: ./websocket-gateway-service
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
     - ./websocket-gateway-service:/usr/src/app       
      - /usr/src/app/node_modules     
    command: yarn start:dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - chat_network
    restart: unless-stopped

  file-service:
    build:
      context: ./file-service
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./file-service:/usr/src/app       # Монтируем весь проект
      - /usr/src/app/node_modules   
    command: yarn start:dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - chat_network
    restart: unless-stopped

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ./notification-service:/usr/src/app       # Монтируем весь проект
      - /usr/src/app/node_modules   
    command: yarn start:dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - chat_network
    restart: unless-stopped

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - chat_network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    networks:
      - chat_network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - '${RABBITMQ_PORT}:${RABBITMQ_PORT}'
      - '${RABBITMQ_UI_PORT}:${RABBITMQ_UI_PORT}'
    networks:
      - chat_network
    healthcheck:
      test: ['CMD', 'rabbitmqctl', 'status']
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    build: ./gateway
    ports:
      - '${NGINX_PORT}:${NGINX_PORT}'
    depends_on:
      - auth-service
    volumes:
      - ./gateway/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - chat_network
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - '${ELASTICSEARCH_PORT}:9200'
    networks:
      - chat_network
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  elasticsearch_data:

networks:
  chat_network:
    driver: bridge
